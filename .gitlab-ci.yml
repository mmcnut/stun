# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script:
    - apt update && apt -y install cmake ninja-build libgtest-dev
  script:
    - pwd
    - mkdir build || echo "Build Folder Exists"
    - cmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_C_COMPILER:FILEPATH=/usr/local/bin/gcc -DCMAKE_CXX_COMPILER:FILEPATH=/usr/local/bin/g++ -S./ -B./build -G Ninja
    - cmake --build ./build --config Debug --target all --
  artifacts:
    paths:
      - build
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  cache:
    paths:
      - "build/bin/*"

# run tests using the binary built before
test:
  stage: test
  before_script:
    - apt update && apt -y install cmake
  script:
    - cd build
    - ctest --test-dir hello_world

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
